/* 
 * Copyright 2007-2008 InCrew Software, All Rights Reserved
 *
 * This file may be used or modified without the need for a license.
 *
 * Redistribution of this file in either its original form, or in an
 * updated form may be done under the terms of the GNU LIBRARY GENERAL
 * PUBLIC LICENSE.  If this license is unacceptable to you then you
 * may not redistribute this work.
 * 
 * See the file COPYING.GPL for details.
 */
#include "PchUtils.h"

#include "NWCommSocket.h"
#include "NWEvent.h"
#include "NWCriticalSection.h"

#include <WinSock.h>

struct NWSocketData
{
    SOCKET mSocket;
    NWCriticalSection * mCritSec;
};

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
NWSocket::NWSocket() : 
    mInitd(false),
    mSocketData(NULL)
{
}

/*virtual*/ NWSocket::~NWSocket()
{
    ASSERT(mInitd);
}

/*virtual*/ bool NWSocket::init()
{
    bool bRet = true;

    if(!mInitd)
    {
        mListenerList.reserve(8);
        mSocketData = NEW NWSocketData;

        mInitd = true;
        bRet = true;
    }
    
    return bRet;
}

/*virtual*/ void NWSocket::done()
{
    if(mInitd)
    {
        DISPOSE(mSocketData);
        mListenerList.clear();

        mInitd = false;
    }
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*static*/ NWServerSocket * NWServerSocket::create()
{
    return NEW NWServerSocket();
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*static*/ void NWServerSocket::destroy(NWServerSocket * _serverSocket)
{
    if(_serverSocket)
    {
        _serverSocket->done();
        DISPOSE(_serverSocket);
    }
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
NWServerSocket::NWServerSocket() : NWSocket(),
    mListenPort(-1)
{
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*virtual*/ NWServerSocket::~NWServerSocket()
{
    done();
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
bool NWServerSocket::init(NWIP _interface, int _listenPort)
{
    bool bRet = false;

    if(!mInitd)
    {
        mListenerThread = NWThread::create();
        mListenerThread->start(this);

        mInitd = true;
        bRet = true;
    }

    return bRet;
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWServerSocket::done()
{
    if(mInitd)
    {
        mInitd = false;
    }
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWServerSocket::release()
{
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
int NWServerSocket::getPort()
{
    return -1;
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWServerSocket::send(unsigned char * _buffPtr, int size)
{
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWServerSocket::addListener(IServerSocketListener * _listener)
{
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWServerSocket::removeListener(IServerSocketListener * _listener)
{
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*virtual*/ bool NWServerSocket::messageAvailable()
{
    return false;
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*virtual*/ void NWServerSocket::dispatchMessages()
{
}

//****************************************************************************
// NWThreadFn
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*virtual*/ unsigned int NWServerSocket::threadMain(ThreadParams const * _threadParams)
{
    NWEvent * endEvent = _threadParams->mEventEndRequest;
    
    while(!endEvent->isSignaled())
    {
    }

    // close listen socket
    // close client sockets

    return 0;
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWServerSocket::onData(MemBufferRef * _memBuff)
{
}


//****************************************************************************
// Client Socket
//****************************************************************************

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*static*/ NWClientSocket * NWClientSocket::create()
{
    return NEW NWClientSocket();
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*static*/ void NWClientSocket::destroy(NWClientSocket * _socket)
{
    ASSERT(_socket);
    
    _socket->done();
    DISPOSE(_socket);
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
NWClientSocket::NWClientSocket() : NWSocket()
{
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*virtual*/ NWClientSocket::~NWClientSocket()
{
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
bool NWClientSocket::init(NWIP _serverIp, int _serverPort)
{
    return false;
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWClientSocket::done()
{
}

//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
void NWClientSocket::release()
{
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*virtual*/ unsigned int NWClientSocket::threadMain(ThreadParams const * _threadParams)
{
    return 0;
}

//****************************************************************************
//
//****************************************************************************
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
/*virtual*/ bool NWClientSocket::messageAvailable()
{
    return false;
}

/*virtual*/ void NWClientSocket::dispatchMessages()
{
}
